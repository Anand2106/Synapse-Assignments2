{
	"name": "ErrorHanding_Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "errorHandling_Source1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "errorHanding_Source2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ErrorHandling_Destination",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          proId as string,",
				"          proName as string,",
				"          brand as string,",
				"          catId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          catId as string,",
				"          catName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 assert(expectUnique(proId, false, 'assert1'),",
				"     expectExists(source1@catId == source2@catId, false, 'assert2')) ~> assert1",
				"assert1 split(isError(),",
				"     disjoint: false) ~> split1@(ErrorRows, GoodRows)",
				"split1@GoodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['errorhandling_Output.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}